/*  _____                         ________   ____    __  __
 * /\  __`\                      /\_____  \ /\  _`\ /\ \/\ \
 * \ \ \/\ \  _____     __    ___\/____//'/'\ \ \/\ \ \ \/'/'
 *  \ \ \ \ \/\ '__`\ /'__`\/' _ `\   //'/'  \ \ \ \ \ \ , <
 *   \ \ \_\ \ \ \L\ \\  __//\ \/\ \ //'/'___ \ \ \_\ \ \ \\`\
 *    \ \_____\ \ ,__/ \____\ \_\ \_\/\_______\\ \____/\ \_\ \_\
 *     \/_____/\ \ \/ \/____/\/_/\/_/\/_______/ \/___/  \/_/\/_/
 *              \ \_\
 *               \/_/ OpenZDK Release 1 | 2010-04-14
 *
 * Program.cs
 * Copyright (c) 2010 itsnotabigtruck.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.Runtime.InteropServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Text;
using System.Collections.Generic;

namespace ZuneBoards.DevelopmentFront.NativeAppLauncher.HD
{
    static class Program
    {
        const int _logWaitTime = 10;

        const string _rootpath = @"\\gametitle\\584E07D1\\Content";
        const string _payload = _rootpath + @"\\OpenTyrianHD.exe";
        const string _log = @"\\xnaa\\othd_log.txt";

        static void LogThreadProc()
        {
            try
            {
                while (!File.Exists(_log))
                {
                    Debug.WriteLine("Can't find log file, sleeping.");
                    Thread.Sleep(_logWaitTime);
                    Debug.WriteLine("Done sleeping.");
                }

                Debug.WriteLine("Found log file.");
                FileStream logStream = new FileStream(_log, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                byte[] buffer = new byte[1024];
                long position = 0;
                while (true)
                {
                    long length;
                    while (position == (length = logStream.Length))
                    {
                        Debug.WriteLine("No new content in log file, sleeping");
                        Thread.Sleep(_logWaitTime);
                        Debug.WriteLine("Done sleeping");
                    }

                    int read = logStream.Read(buffer, 0, Math.Min(buffer.Length, (int)(length - position)));
                    string msg = System.Text.Encoding.ASCII.GetString(buffer, 0, read);
                    Debug.Write(msg);
                    position += read;
                }
            }
            catch (Exception e)
            {
                Debug.Write(e.ToString());
            }
        }

        static void CheckForFile(string path)
        {
            bool found = System.IO.File.Exists(path);
            Debug.WriteLine("Found \"" + path + "\": " + found);
            if (!found)
            {
                throw new ApplicationException("Couldn't find \"" + path + "\".");
            }
        }

        static bool DumpLogFile()
        {
            try
            {
                if (!File.Exists(_log))
                {
                    Debug.WriteLine("No log file");
                    return false;
                }

                Debug.WriteLine("Reading log file");
                List<string> lines = new List<string>();
                try
                {
                    using (StreamReader sr = new StreamReader(_log))
                    {
                        string line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            lines.Add(line);
                        }
                    }
                }
                catch (IOException e)
                {
                    lines.Add(e.ToString() + Environment.NewLine);
                }
                Debug.WriteLine("There are " + lines.Count + " lines in the log file.");
                DateTime start = DateTime.Now;
                StringBuilder data = new StringBuilder();
                int curr = 0;
                while (curr < lines.Count)
                {
                    for (int i = 0; i < 8 && curr < lines.Count; i++, curr++)
                    {
                        data.AppendLine(lines[curr]);
                    }
                    Debug.Write(data.ToString());
                    data.Length = 0;
                }
                Debug.WriteLine(data.ToString());
                Debug.WriteLine("End of log file.");
                TimeSpan dumpCost = DateTime.Now - start;
                Debug.WriteLine("Time to dump log: " + dumpCost);
                File.Delete(_log);
                return true;
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
                return false;
            }
        }

        static void Main(string[] args)
        {
            Debug.WriteLine("The time is now " + DateTime.Now);
//            CheckForFile(_payload);

            IAsyncResult async = Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(null, null);
            var storage = Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector(async);
            Debug.WriteLine("Is connected: " + storage.IsConnected);
            var container = storage.OpenContainer("gametitle");
            Debug.WriteLine("Path: " + container.Path);

            if (DumpLogFile())
            {
                return;
            }

            foreach (var v in Directory.GetDirectories(@"\xnaa"))
            {
                Debug.WriteLine(v);
            }
            foreach (var v in Directory.GetFiles(@"\xnaa", "*.*"))
            {
                Debug.WriteLine(v);
            }

//            Thread logThread = new Thread(LogThreadProc);
//            logThread.IsBackground = true;
//            logThread.Start();

            PayloadRunner.Launch(_payload);

            DumpLogFile();
        }
    }
}